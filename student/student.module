<?php

/**
 * @file
 * Provides a student entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\student\Entity;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;

function student_entity_info() {
  $info = array();
  $info['example'] = array(
    'label' => t('Example'),
    'base table' => 'example',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
    ),
    'fieldable' => TRUE,
  );
  return $info;
}

function student_schema() {
  $schema = array();
  $schema['example'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

function student_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'student_edit_form' || $form_id == 'student_add_form') {
    // Add custom validation function to the form.
    $form['#validate'][] = 'student_form_validation';
  }
}

function student_form_validation(&$form, FormStateInterface $form_state) {

   if ($form_state->getFormObject() instanceof \Drupal\Core\Entity\ContentEntityFormInterface) {
    $entity = $form_state->getFormObject()->getEntity();
    $entity_id = $entity->id();

    // Do something with the entity ID.
  }

  $roll_number =  $form_state->getValue('field_roll_number')['0']['value'];
  if(empty($entity_id ))
  {
    $query = "SELECT * FROM student__field_roll_number where field_roll_number_value = $roll_number ";
  }
  else
  {
    $query = "SELECT * FROM student__field_roll_number where field_roll_number_value = $roll_number and entity_id != $entity_id";
  }
  $database = \Drupal::database();
    $query = $database->query($query);
    $result = $query->fetchAll();
    if(!empty($result))
    {
          $form_state->setErrorByName('field_roll_number', t("roll number already availabe Please go to /admin/content/student/". $result['0']->entity_id."/edit'"));

    }
}

/**
 * Implements hook_theme().
 */
function student_theme() {
  return [
    'student' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for student templates.
 *
 * Default template: student.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the student information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_student(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
